#! /usr/bin/python

import time
import os
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), './python'))

from tcp_client import TCPClient

import flatbuffers
# Generated by `flatc`.
import IoTDevice.Sample.Data
import IoTDevice.Sample.Vec3
import IoTDevice.Sample.IoTDevice

def main():
    c = TCPClient()
    c.start('127.0.0.1', 9989)
    t_values = [ 23,24,25 ]
    h_values = [ 71,72,73 ]
    l_values = [ 222,223,224 ]
    idx = 0;

    while True:
        if idx == 3 :
            idx = 0

        builder = flatbuffers.Builder(0)

        data_temp = builder.CreateString('Temp')
        data_humi = builder.CreateString('Humi')
        data_light = builder.CreateString('Light')

        IoTDevice.Sample.Data.DataStart(builder)
        IoTDevice.Sample.Data.DataAddName(builder, data_temp)
        IoTDevice.Sample.Data.DataAddValue(builder, t_values[idx])
        temp = IoTDevice.Sample.Data.DataEnd(builder)

        IoTDevice.Sample.Data.DataStart(builder)
        IoTDevice.Sample.Data.DataAddName(builder, data_humi)
        IoTDevice.Sample.Data.DataAddValue(builder, h_values[idx])
        humi = IoTDevice.Sample.Data.DataEnd(builder)

        IoTDevice.Sample.Data.DataStart(builder)
        IoTDevice.Sample.Data.DataAddName(builder, data_light)
        IoTDevice.Sample.Data.DataAddValue(builder, l_values[idx])
        light = IoTDevice.Sample.Data.DataEnd(builder)

        IoTDevice.Sample.IoTDevice.IoTDeviceStartDataVector(builder, 3)
        builder.PrependUOffsetTRelative(light)
        builder.PrependUOffsetTRelative(humi)
        builder.PrependUOffsetTRelative(temp)
        all_data = builder.EndVector(3)

        device_name = builder.CreateString('SPT-1001')
        pos = IoTDevice.Sample.Vec3.CreateVec3(builder, 1.0, 2.0, 3.0)

        IoTDevice.Sample.IoTDevice.IoTDeviceStart(builder)
        IoTDevice.Sample.IoTDevice.IoTDeviceAddPos(builder, pos)
        IoTDevice.Sample.IoTDevice.IoTDeviceAddName(builder, device_name)
        IoTDevice.Sample.IoTDevice.IoTDeviceAddData(builder, all_data)
        sample_device = IoTDevice.Sample.IoTDevice.IoTDeviceEnd(builder)

        builder.Finish(sample_device)

        buf = builder.Output()
        size = len(buf)
        idx = idx + 1

        c.write(buf,None)
        time.sleep(10)

    c.end()

if __name__ == '__main__':
    main()


